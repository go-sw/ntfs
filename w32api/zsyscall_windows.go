// Code generated by 'go generate'; DO NOT EDIT.

package w32api

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modkernel32 = windows.NewLazySystemDLL("kernel32.dll")
	modntdll    = windows.NewLazySystemDLL("ntdll.dll")

	procBackupRead             = modkernel32.NewProc("BackupRead")
	procBackupSeek             = modkernel32.NewProc("BackupSeek")
	procBackupWrite            = modkernel32.NewProc("BackupWrite")
	procFindClose              = modkernel32.NewProc("FindClose")
	procFindFirstStreamW       = modkernel32.NewProc("FindFirstStreamW")
	procFindNextStreamW        = modkernel32.NewProc("FindNextStreamW")
	procNtClose                = modntdll.NewProc("NtClose")
	procNtOpenFile             = modntdll.NewProc("NtOpenFile")
	procNtQueryEaFile          = modntdll.NewProc("NtQueryEaFile")
	procNtQueryInformationFile = modntdll.NewProc("NtQueryInformationFile")
	procNtSetEaFile            = modntdll.NewProc("NtSetEaFile")
)

func backupRead(file windows.Handle, buffer *byte, numberOfBytesToRead uint32, numberOfBytesRead *uint32, abort bool, processSecurity bool, context *uintptr) (err error) {
	var _p0 uint32
	if abort {
		_p0 = 1
	}
	var _p1 uint32
	if processSecurity {
		_p1 = 1
	}
	r1, _, e1 := syscall.Syscall9(procBackupRead.Addr(), 7, uintptr(file), uintptr(unsafe.Pointer(buffer)), uintptr(numberOfBytesToRead), uintptr(unsafe.Pointer(numberOfBytesRead)), uintptr(_p0), uintptr(_p1), uintptr(unsafe.Pointer(context)), 0, 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func backupSeek(file windows.Handle, lowBytesToSeek uint32, highBytesToSeek uint32, lowBytesSeeked *uint32, highBytesSeeked *uint32, context *uintptr) (err error) {
	r1, _, e1 := syscall.Syscall6(procBackupSeek.Addr(), 6, uintptr(file), uintptr(lowBytesToSeek), uintptr(highBytesToSeek), uintptr(unsafe.Pointer(lowBytesSeeked)), uintptr(unsafe.Pointer(highBytesSeeked)), uintptr(unsafe.Pointer(context)))
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func backupWrite(file windows.Handle, buffer *byte, numberOfBytesToRead uint32, numberOfBytesRead *uint32, abort bool, processSecurity bool, context *uintptr) (err error) {
	var _p0 uint32
	if abort {
		_p0 = 1
	}
	var _p1 uint32
	if processSecurity {
		_p1 = 1
	}
	r1, _, e1 := syscall.Syscall9(procBackupWrite.Addr(), 7, uintptr(file), uintptr(unsafe.Pointer(buffer)), uintptr(numberOfBytesToRead), uintptr(unsafe.Pointer(numberOfBytesRead)), uintptr(_p0), uintptr(_p1), uintptr(unsafe.Pointer(context)), 0, 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func findClose(findFile windows.Handle) (err error) {
	r1, _, e1 := syscall.Syscall(procFindClose.Addr(), 1, uintptr(findFile), 0, 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func findFirstStream(fileName *uint16, infoLevel int32, findStreamData unsafe.Pointer, flags uint32) (hnd windows.Handle, err error) {
	r0, _, e1 := syscall.Syscall6(procFindFirstStreamW.Addr(), 4, uintptr(unsafe.Pointer(fileName)), uintptr(infoLevel), uintptr(findStreamData), uintptr(flags), 0, 0)
	hnd = windows.Handle(r0)
	if hnd == windows.InvalidHandle {
		err = errnoErr(e1)
	}
	return
}

func findNextStream(findStream windows.Handle, findStreamData unsafe.Pointer) (err error) {
	r1, _, e1 := syscall.Syscall(procFindNextStreamW.Addr(), 2, uintptr(findStream), uintptr(findStreamData), 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func ntClose(fileHandle windows.Handle) (ntstatus error) {
	r0, _, _ := syscall.Syscall(procNtClose.Addr(), 1, uintptr(fileHandle), 0, 0)
	if r0 != 0 {
		ntstatus = windows.NTStatus(r0)
	}
	return
}

func ntOpenFile(fileHandle *windows.Handle, accessMask uint32, objectAttributes *windows.OBJECT_ATTRIBUTES, ioStatusBlock *windows.IO_STATUS_BLOCK, sharedAccess uint32, openOptions uint32) (ntstatus error) {
	r0, _, _ := syscall.Syscall6(procNtOpenFile.Addr(), 6, uintptr(unsafe.Pointer(fileHandle)), uintptr(accessMask), uintptr(unsafe.Pointer(objectAttributes)), uintptr(unsafe.Pointer(ioStatusBlock)), uintptr(sharedAccess), uintptr(openOptions))
	if r0 != 0 {
		ntstatus = windows.NTStatus(r0)
	}
	return
}

func ntQueryEaFile(fileHandle windows.Handle, ioStatusBlock *windows.IO_STATUS_BLOCK, buffer unsafe.Pointer, length uint32, returnSingleEntry bool, eaList unsafe.Pointer, eaListLength uint32, eaIndex *uint32, restartScan bool) (ntstatus error) {
	var _p0 uint32
	if returnSingleEntry {
		_p0 = 1
	}
	var _p1 uint32
	if restartScan {
		_p1 = 1
	}
	r0, _, _ := syscall.Syscall9(procNtQueryEaFile.Addr(), 9, uintptr(fileHandle), uintptr(unsafe.Pointer(ioStatusBlock)), uintptr(buffer), uintptr(length), uintptr(_p0), uintptr(eaList), uintptr(eaListLength), uintptr(unsafe.Pointer(eaIndex)), uintptr(_p1))
	if r0 != 0 {
		ntstatus = windows.NTStatus(r0)
	}
	return
}

func ntQueryInformationFile(fileHandle windows.Handle, ioStatusBlock *windows.IO_STATUS_BLOCK, fileInformation unsafe.Pointer, length uint32, fileInformationClass int32) (ntstatus error) {
	r0, _, _ := syscall.Syscall6(procNtQueryInformationFile.Addr(), 5, uintptr(fileHandle), uintptr(unsafe.Pointer(ioStatusBlock)), uintptr(fileInformation), uintptr(length), uintptr(fileInformationClass), 0)
	if r0 != 0 {
		ntstatus = windows.NTStatus(r0)
	}
	return
}

func ntSetEaFile(fileHandle windows.Handle, ioStatusBlock *windows.IO_STATUS_BLOCK, buffer unsafe.Pointer, length uint32) (ntstatus error) {
	r0, _, _ := syscall.Syscall6(procNtSetEaFile.Addr(), 4, uintptr(fileHandle), uintptr(unsafe.Pointer(ioStatusBlock)), uintptr(buffer), uintptr(length), 0, 0)
	if r0 != 0 {
		ntstatus = windows.NTStatus(r0)
	}
	return
}
